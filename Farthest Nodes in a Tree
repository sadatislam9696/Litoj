

/***   Bismillahir Rahmanir Rahim   ***/

#include<bits/stdc++.h>
using namespace std;

#define     nn          '\n'
#define     ss          second
#define     ff          first
#define     sp(d, n)    fixed << setprecision(d) << n
#define     srt(v)      sort(v.begin(),v.end());
#define     rsrt(v)     sort(v.rbegin(),v.rend());
#define     rev(v)      reverse(v.begin(),v.end());
#define     mem(a, x)   memset(a, x, sizeof a)

using ll =  long long;
using ld =  long double;
using ull = unsigned long long;
const ld pi = acos(-1.0);
template <typename T>
using minHeap = priority_queue<T, vector<T>, greater<T>>;

int dx[6] = {0, 1, -1, 0, 0};
int dy[6] = {0, 0, 0, 1, -1};

const int M = 1e9 + 7;
const int N = 3e4 + 9;

vector<pair<int, int>>adj[N];
int n, d[N];

void dfs(int u, int p){
    for(auto it : adj[u]){
        int v = it.ff;
        int w = it.ss;
        if(v != p){
            d[v] = d[u] + w;
            dfs(v, u);
        }
    }
}
void solution(){
    cin >> n;
    for(int i = 1; i < n; i++){
        int u, v, w;
        cin >> u >> v >> w;
        u++; v++;
        adj[u].push_back({v, w});
        adj[v].push_back({u, w});
    }

    d[1] = 0;
    dfs(1, 0);

    int node = 1, sum = 0;
    for(int i = 1; i <= n; i++){
        if(d[i] > sum){
            sum = d[i];
            node = i;
        }
    }

    //cout << node << ' ' << sum << nn;

    d[node] = 0;
    dfs(node, 0);

    sum = 0;
    for(int i = 1; i <= n; i++){
        if(d[i] > sum){
            sum = d[i];
            node = i;
        }
    }

    cout << d[node] << nn;
    for(int i = 1; i <= n; i++){
        adj[i].clear();
        d[i] = 0;
    }
}

int32_t main(){

    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);cout.tie(nullptr);

    int t = 1, c = 1;
    cin >> t;
    //cin.ignore();
    while(t--){
        cout << "Case " << c++ << ": ";
        solution();
    }
    return 0;
}
